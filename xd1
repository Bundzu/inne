ZADANIE 1 ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


import java.util.InputMismatchException;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        double r = 0;
		double h = 0;
        try {
            System.out.print("Podaj r: ");
            a = scanner.nextDouble();
            System.out.print("Podaj h: ");
            h = scanner.nextDouble();
        }
        catch (InputMismatchException e)
        {
            System.out.println(e.getMessage());
        }
        if(h <=0 || a <= 0)
        {
            System.out.println("dlugosci musza byc wieksze od zera");
            return;
        }
        System.out.println("Pole powierzchni bocznej wynosi " + 6.283185307*r*h);
        System.out.println("Objętość wynosi " + 3.14159265*r*r*h);
    }
}

ZADANIE 2 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


import javax.swing.*;
import java.awt.*;

public class Drawing extends JPanel {
    @Override
    public void paintComponent(Graphics g){
        super.paintComponent(g);

        //  linie
        g.drawLine(100, 10, 250, 160);
        g.drawLine(250, 10, 100, 160);

    	// koło
        g.drawOval(100,10,150,150);
    }
}

public class Main {

    public static void main(String[] args) {
     JFrame frame = new JFrame("TEST");

        frame.setSize(300, 300);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        Drawing panel = new Drawing();
	panel.setBackground(Color.yellow);

        frame.add(panel);
        frame.setVisible(true);
    }
}



ZADANIE 3 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

public class Plytoteka {

    public Plytoteka(String name)
    {
        Name = name;
    }
    private String Name;

    private String autor;


    public <T> Comparable<T> getTytul() {
        return (Comparable<T>) Name;
    }
}

import java.text.Collator;
import java.util.*;

public class Main {
    public static void main(String[] args) {

        Plytoteka utwor1 = new Plytoteka("nothing else matters");
        Plytoteka utwor2 = new Plytoteka("unforgivable 1");
        Plytoteka utwor3 = new Plytoteka("unforgivable 2");
        Plytoteka utwor4 = new Plytoteka("unforgivable 3");
        Plytoteka utwor5 = new Plytoteka("w grocie krola gor");
        Plytoteka utwor6 = new Plytoteka("symfonia lenningradzka");
        Plytoteka utwor7 = new Plytoteka("rechot zab");
        Plytoteka utwor8 = new Plytoteka("szum morza");
        Plytoteka utwor9 = new Plytoteka("bialy szum");

        List<Plytoteka> piosenki = new ArrayList<>();

        piosenki.add(utwor1);
        piosenki.add(utwor2);
        piosenki.add(utwor3);
        piosenki.add(utwor4);
        piosenki.add(utwor5);
        piosenki.add(utwor6);
        piosenki.add(utwor7);
        piosenki.add(utwor8);
        piosenki.add(utwor9);


        Collator abc = Collator.getInstance(new Locale("pl","PL"));
        Collections.sort(piosenki, (Plytoteka u1, Plytoteka u2) -> abc.compare(u1.getTytul(), u2.getTytul()));

        for(int i=0;i<10;i++)
        {
            System.out.println(piosenki.get(i).getTytul());
        }
    }
}



ZADANIE 4 ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

public class Punkt2D {

    private double x;
    private double y;

    public Punkt2D() {
        x = 0;
        y = 0;

        System.out.println("Konstruktor domyslny");
    }

    public Punkt2D(double x, double y) {
        this.x = x;
        this.y = y;

        System.out.println("Konstruktor parametryczny");
    }

    public double getX() {
        return x;
    }

    public double getY() {
        return y;
    }

    public void setX(double x) {
        this.x = x;
    }

    public void setY(double y) {
        this.y = y;
    }

    public String toString() {
        return "(" + x + ", " + y + ")";
    }
}

public class Punkt3D extends Punkt2D{

    private double z;

    public Punkt2DKolor() {
        super();
        z = 0;
    }

    public Punkt2DKolor(double x, double y, double z) {
        super(x, y);
        this.z = z;
    }

    public double getZ() {
        return z;
    }

    public void setZ(double z) {
        this.z = z;
    }


    public String toString() {
        return super.toString() + z;
    }
}


ZADANIE 5 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

Serializacja to przekształcenie obiekt -> zerojedynki, a deserializacja na odwrót

import java.io.Serializable;

public class Plytoteka implements Serializable {

    public Plytoteka(String name)
    {
        Tytul = name;
    }
    private String Tytul;

    private String autor;

    public <T> Comparable<T> getTytul() {
        return (Comparable<T>) Tytul;
    }

    @Override
    public String toString()
    {
        return "Nazwa: " + Tytul;
    }
}

import java.io.*;

public class Main {
    public static void main(String[] args) {

        Plytoteka utwor1 = new Plytoteka("chopin nokturn");

        try (FileOutputStream fos = new FileOutputStream("E:\\CS\\utwor1.txt");
             ObjectOutputStream oos = new ObjectOutputStream(fos)) {
            oos.writeObject(utwor1);
        } catch (IOException e) {
            e.printStackTrace();
        }

        try (FileInputStream fis = new FileInputStream("E:\\CS\\utwor1.txt");
             ObjectInputStream ois = new ObjectInputStream(fis)) {
            Plytoteka utwor1Deserializowany = (Plytoteka) ois.readObject();
            System.out.println(utwor1Deserializowany.toString());
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }
    }
}

