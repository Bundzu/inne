# Zadanie 1
# Algorytm wyszukiwania największej/najmniejszej liczby w danym zbiorze, 
import random
lista = []
for x in range(10):                       #generowanie losowych wartości w liście
    lista.append(random.randint(0,100)) 
print ("Wylosowana lista",lista)
duza = lista[0]                           #przypisujemy od razu wartości z zerowego elementu i zaczynamy pętle od następnego elementu
mala = lista[0]                            
for i in lista[1:]:                       #porównywanie liczb w liście, pomijamy element zerowy więc pętla wykona się tylko 9 razy
    if mala > i:
        mala = i
    if duza < i :
        duza = i
        
print("Najmniejsza liczba:", mala)
print("Największa liczba:", duza)

#Zadanie 2
# Algorytm wyszukiwania największej liczby w danym zbiorze.
import random
lista2 = []
for x in range(10):                       #generowanie losowych wartości w liście
    lista2.append(random.randint(0,100)) 
print ("Wylosowana lista",lista2)

big = lista2[0]
for i in lista2[1:]:                      #pomijamy zerowy element w liście bo jest już przypisany
    if big < i:
        big = i
print("Największą liczbą jest:", big)

#Zadanie 3
#Zaimplementuj stos lub kolejkę (wersja wskaźnikowa lub tablicowa).
#stos wersja tablicowa
class stosik:
    def __init__(self):
        self.items = []

    def push(self, item):			#dodanie elementu na górę stosu
        self.items.append(item)
    def pop(self):					#pobranie elementu z góry
        return self.items.pop()
    def peek(self):					#odczytanie wartości z góry
        return self.items[-1]
    def size(self):					#liczba elementów na stosie
        return len(self.items)
    def is_empty(self):				#sprawdza czy pusty
        return self.items == []

stos = stosik()								#nie udało mi się użyć tablicy przy użyciu import array więc pozostałem przy liście
print("czy jest pusta?",stos.is_empty())
print("rozmiar:",stos.size())
stos.push(4) 
stos.push(20) 
print("ostatni element:",stos.peek())
stos.push(60) 
stos.push(85) 
print("rozmiar:",stos.size())
print("czy jest pusta?:",stos.is_empty()) 
print("zdjęcie ze stosu",stos.pop()) 
print("rozmiar:",stos.size())

#boyer-moore
def strong_suffix(shift, pos, wzor, m):

	i = m 
	j = m + 1
	pos[i] = j

	while i > 0:
		while j <= m and wzor[i - 1] != wzor[j - 1]:
			if shift[j] == 0:
				shift[j] = j - i
			j = pos[j]
		i -= 1
		j -= 1
		pos[i] = j

def innyw(shift, pos, wzor, m):
	j = pos[0]
	for i in range(m + 1):
		if shift[i] == 0:
			shift[i] = j
		if i == j:
			j = pos[j]
            
def search(text, wzor):

	s = 0
	m = len(wzor)
	n = len(text)
	pos = [0] * (m + 1)
	shift = [0] * (m + 1)
    
	strong_suffix(shift, pos, wzor, m)
	innyw(shift, pos, wzor, m)

	while s <= n - m:
		j = m - 1
		while j >= 0 and wzor[j] == text[s + j]:
			j -= 1
		if j < 0:
			print("Znaleziono od znaku: %d" % s)
			s += shift[0]
		else:
			s += shift[j + 1]

text = "Ala ma kota, kot ma Alę"
wzor = "kot"
search(text, wzor)

# Algorytm Karpa-Rabina
def search(wzor, txt, q):
    M = len(wzor)
    N = len(txt)
    i = j = w = t = 0
    h = 1
 
    for i in range(M-1):
        h = (h*d) % q

    for i in range(M):
        w = (d*w + ord(wzor[i])) % q
        t = (d*t + ord(txt[i])) % q
 
    for i in range(N-M+1):
        if w == t:
            for j in range(M):
                if txt[i+j] != wzor[j]:
                    break
                else:
                    j += 1

            if j == M:
                print("Znaleziono od znaku: " + str(i))
 
        if i < N-M:
            t = (d*(t-ord(txt[i])*h) + ord(txt[i+M])) % q
            if t < 0:
                t = t+q
 
d = 256 # liczba znaków w rozszerzonym ASCII
txt = "Ala ma kota, kot ma Alę"
wzor = "kot"
q = 347     # liczba pierwsza potrzebna do obliczeń
print(txt, "\n Szukane:", wzor)
search(wzor, txt, q)



#bubblesort
import random
import time
lista = []
for x in range(20000):                                       # generowanie losowych wartości w liście
    lista.append(random.randint(-10000,10000))
print ("Wylosowana lista: \n",lista)
start = time.time()

i = j = 0
n = len(lista)
for i in range(n-1):                                        # ostatni element będzie posortowany więc pętla wykona się o 1 mniej
    for j in range(0, n-i-1):
        if lista[j] > lista[j + 1]:                         # jeżeli aktualna liczba jest większa od następnej
            lista[j], lista[j+1] = lista[j+1], lista[j]     # zamiana liczb w liście

print ("po sortowaniu: \n",lista)
end = time.time()
print ("Czas: ", end - start)

#quicksort
import time
import random
lista = []
for x in range(20000):                        # generowanie losowych wartości w liście
    lista.append(random.randint(-10000,10000))

print ("Wylosowana lista: \n",lista)

def quicks(lista):
    length = len(lista)
    if length <= 1:                 # lista musi być większa niż 1
        return lista
    else:
        pivot = lista.pop()         # bierzemy jako pivot ostatni element w liście

    wieksze = []                    # większe i mniejsze liczby od pivota
    mniejsze = []

    for item in lista:
        if item > pivot:
            wieksze.append(item)    # dodajemy elementy do listy wieksze dla liczb większych od pivota
        else:
            mniejsze.append(item)
    return quicks(mniejsze) + [pivot] + quicks(wieksze)

start = time.time()
print("Po sortowaniu: \n", quicks(lista))
end = time.time()
print ("Czas: ", end - start)
